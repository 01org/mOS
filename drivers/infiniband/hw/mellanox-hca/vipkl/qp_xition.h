/*
  This software is available to you under a choice of one of two
  licenses.  You may choose to be licensed under the terms of the GNU
  General Public License (GPL) Version 2, available at
  <http://www.fsf.org/copyleft/gpl.html>, or the OpenIB.org BSD
  license, available in the LICENSE.TXT file accompanying this
  software.  These details are also available at
  <http://openib.org/license.html>.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

  Copyright (c) 2004 Mellanox Technologies Ltd.  All rights reserved.
*/

#ifndef H_QP_XITION_H
#define H_QP_XITION_H

#include "qpm.h"
#include <vapi_common.h>

/* update this const according to the above enum */
#define QPM_NUM_TS 5	
/* update this const according to the above enum */
#define QPM_NUM_QP_STATE 7	


/*------------------------------- QP state xition attribute masks -----------------------------*/

#define ALL_SUPPORTED_MASK	(QP_ATTR_QP_STATE | QP_ATTR_EN_SQD_ASYN_NOTIF | QP_ATTR_QP_NUM |\
							 QP_ATTR_REMOTE_ATOMIC_FLAGS | QP_ATTR_DEST_QP_NUM |\
							 QP_ATTR_PKEY_IX | QP_ATTR_PORT | QP_ATTR_QKEY | QP_ATTR_AV |\
							 QP_ATTR_PATH_MTU | QP_ATTR_TIMEOUT | QP_ATTR_RETRY_COUNT |\
							 QP_ATTR_RNR_RETRY | QP_ATTR_RQ_PSN | QP_ATTR_QP_OUS_RD_ATOM | \
							 QP_ATTR_MIN_RNR_TIMER | QP_ATTR_SQ_PSN | QP_ATTR_OUS_DST_RD_ATOM |\
							 QP_ATTR_DEST_QP_NUM | QP_ATTR_ALT_PATH | QP_ATTR_PATH_MIG_STATE | QP_ATTR_SCHED_QUEUE)

#define ALL_ERR_MASK  		QP_ATTR_QP_STATE

#define RST_INIT_REQ_MASK	(QP_ATTR_QP_STATE | QP_ATTR_REMOTE_ATOMIC_FLAGS | \
							 QP_ATTR_PKEY_IX | QP_ATTR_PORT | QP_ATTR_QKEY)
#define RST_INIT_OPT_MASK	(RST_INIT_REQ_MASK | QP_ATTR_SCHED_QUEUE)

#define INIT_INIT_REQ_MASK 	0
#define INIT_INIT_OPT_MASK 	(QP_ATTR_QKEY | QP_ATTR_REMOTE_ATOMIC_FLAGS | QP_ATTR_PKEY_IX | QP_ATTR_PORT)

#define INIT_RTR_REQ_MASK	(QP_ATTR_QP_STATE | QP_ATTR_RQ_PSN | \
                             QP_ATTR_QP_OUS_RD_ATOM | QP_ATTR_DEST_QP_NUM | QP_ATTR_AV | \
                             QP_ATTR_PATH_MTU  | QP_ATTR_MIN_RNR_TIMER)
#define INIT_RTR_OPT_MASK	(INIT_RTR_REQ_MASK | QP_ATTR_ALT_PATH | \
							 QP_ATTR_REMOTE_ATOMIC_FLAGS | \
							 QP_ATTR_PKEY_IX  | QP_ATTR_QKEY | QP_ATTR_CAP | QP_ATTR_SCHED_QUEUE)

#define RTR_RTS_REQ_MASK 	(QP_ATTR_QP_STATE | QP_ATTR_SQ_PSN | QP_ATTR_OUS_DST_RD_ATOM | \
							 QP_ATTR_TIMEOUT | QP_ATTR_RETRY_COUNT | QP_ATTR_RNR_RETRY)
#define RTR_RTS_OPT_MASK	(RTR_RTS_REQ_MASK | QP_ATTR_REMOTE_ATOMIC_FLAGS | QP_ATTR_QKEY | \
							 QP_ATTR_PATH_MIG_STATE | QP_ATTR_CAP | QP_ATTR_ALT_PATH | \
							 QP_ATTR_MIN_RNR_TIMER)

#define RTS_RTS_REQ_MASK 	0	
#define RTS_RTS_OPT_MASK 	(QP_ATTR_REMOTE_ATOMIC_FLAGS | QP_ATTR_QKEY| QP_ATTR_PATH_MIG_STATE |\
							 QP_ATTR_CAP |QP_ATTR_ALT_PATH | QP_ATTR_MIN_RNR_TIMER)

#define RTS_SQD_REQ_MASK 	QP_ATTR_QP_STATE
#define RTS_SQD_OPT_MASK 	(RTS_SQD_REQ_MASK | QP_ATTR_EN_SQD_ASYN_NOTIF)

#define SQD_RTS_REQ_MASK 	QP_ATTR_QP_STATE
#define SQD_RTS_OPT_MASK 	(SQD_RTS_REQ_MASK | QP_ATTR_DEST_QP_NUM | QP_ATTR_AV | QP_ATTR_PATH_MTU |\
							 QP_ATTR_TIMEOUT | QP_ATTR_RETRY_COUNT | QP_ATTR_RNR_RETRY |\
							 QP_ATTR_ALT_PATH | QP_ATTR_QP_OUS_RD_ATOM | QP_ATTR_REMOTE_ATOMIC_FLAGS |\
							 QP_ATTR_OUS_DST_RD_ATOM | QP_ATTR_QKEY | QP_ATTR_CAP | QP_ATTR_MIN_RNR_TIMER |\
							 QP_ATTR_PORT | QP_ATTR_PKEY_IX | QP_ATTR_PATH_MIG_STATE | QP_ATTR_SCHED_QUEUE)

#define SQE_RTS_REQ_MASK QP_ATTR_QP_STATE
#define SQE_RTS_OPT_MASK (SQE_RTS_REQ_MASK | QP_ATTR_REMOTE_ATOMIC_FLAGS | QP_ATTR_QKEY| QP_ATTR_CAP | QP_ATTR_MIN_RNR_TIMER)

#define ERR_RST_REQ_MASK QP_ATTR_QP_STATE
#define ERR_RST_OPT_MASK ERR_RST_REQ_MASK

/*---------------------- utility macros for defining QP state xition table --------------------*/

/* used to define one state xition element of the table, inputs are the req & opt masks.
   the result is an instance of QPM_qp_state_node_t. */
#define VALID_QP_XITION_NODE(next_state,allowed_mask,must_mask) \
{1,(VAPI_qp_attr_mask_t) allowed_mask, (VAPI_qp_attr_mask_t) must_mask},

/* used to define a non valid element of the table 
   the result is an instance of QPM_qp_state_node_t (where .valid = FALSE).*/
#define INVAL_QP_XITION_NODE(next_state) {0, 0, 0},

/* used to declare the beginning of a new xition element group, where each xition is from 
   curr_state to the state of each element of the group. */
#define BEGIN_QP_STATE_GROUP(curr_state) {

/* used to end a xition group relater to curr_state. */
#define END_QP_STATE_GROUP(curr_state) },

/* used to declare & begin definition of a new QP state xition table, 
   who will be named according to the input argument
   the result is a 2 dimentional array of QPM_qp_state_node_t elements. */
#define BEGIN_QP_STATE_XITION_MAP(tab) static QPM_qp_state_node_t tab[QPM_NUM_QP_STATE][QPM_NUM_QP_STATE] = {

/* used to end definition of the table created by an above BEGIN_QP_STATE_XITION_MAP call. */
#define END_QP_STATE_XITION_MAP };

/* TD: make the commented section compile, so that definition of the table may be removed out of this header. */
/*	
#define DECLARE_STD_QP_STATE_XITION_MAP (\
BEGIN_QP_STATE_XITION_MAP(qp_xition_table)\
\
	BEGIN_QP_STATE_GROUP(VAPI_RESET)\
		\
		VALID_QP_XITION_NODE(VAPI_RESET,ALL_ERR_MASK,ALL_ERR_MASK)	\
		VALID_QP_XITION_NODE(VAPI_INIT,RST_INIT_OPT_MASK,RST_INIT_REQ_MASK)	\
		INVAL_QP_XITION_NODE(VAPI_RTR)	\
		INVAL_QP_XITION_NODE(VAPI_RTS)	\
		INVAL_QP_XITION_NODE(VAPI_SQD)	\
		INVAL_QP_XITION_NODE(VAPI_SQE)	\
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)	\
	\
	END_QP_STATE_GROUP(VAPI_RESET)\
	\
	BEGIN_QP_STATE_GROUP(VAPI_INIT)\
		\
		INVAL_QP_XITION_NODE(VAPI_RESET)	\
		VALID_QP_XITION_NODE(VAPI_INIT,INIT_INIT_OPT_MASK,INIT_INIT_REQ_MASK)	\
		VALID_QP_XITION_NODE(VAPI_RTR,INIT_RTR_OPT_MASK,INIT_RTR_REQ_MASK)	\
		INVAL_QP_XITION_NODE(VAPI_RTS)	\
		INVAL_QP_XITION_NODE(VAPI_SQD)	\
		INVAL_QP_XITION_NODE(VAPI_SQE)	\
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)\
\
	END_QP_STATE_GROUP(VAPI_INIT)\
	\
	BEGIN_QP_STATE_GROUP(VAPI_RTR)\
		\
		INVAL_QP_XITION_NODE(VAPI_RESET)	\
		INVAL_QP_XITION_NODE(VAPI_INIT)	\
		INVAL_QP_XITION_NODE(VAPI_RTR)	\
		VALID_QP_XITION_NODE(VAPI_RTS,RTR_RTS_OPT_MASK,RTR_RTS_REQ_MASK)\
		INVAL_QP_XITION_NODE(VAPI_SQD)	\
		INVAL_QP_XITION_NODE(VAPI_SQE)	\
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)	\
\
	END_QP_STATE_GROUP(VAPI_RTR)\
	\
	BEGIN_QP_STATE_GROUP(VAPI_RTS)\
		\
		INVAL_QP_XITION_NODE(VAPI_RESET)	\
		INVAL_QP_XITION_NODE(VAPI_INIT)	\
		INVAL_QP_XITION_NODE(VAPI_RTR)	\
		VALID_QP_XITION_NODE(VAPI_RTS,RTS_RTS_OPT_MASK,RTS_RTS_REQ_MASK)	\
		sVALID_QP_XITION_NODE(VAPI_SQD,RTS_SQD_OPT_MASK,RTS_SQD_REQ_MASK)\
		INVAL_QP_XITION_NODE(VAPI_SQE)	\
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)	\
\
	END_QP_STATE_GROUP(VAPI_RTS)\
	\
	BEGIN_QP_STATE_GROUP(VAPI_SQD)\
		\
		INVAL_QP_XITION_NODE(VAPI_RESET)	\
		INVAL_QP_XITION_NODE(VAPI_INIT)	\
		INVAL_QP_XITION_NODE(VAPI_RTR)	\
		VALID_QP_XITION_NODE(VAPI_RTS,SQD_RTS_OPT_MASK,SQD_RTS_REQ_MASK)\
		INVAL_QP_XITION_NODE(VAPI_SQD)	\
		INVAL_QP_XITION_NODE(VAPI_SQE)	\
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)	\
\
	END_QP_STATE_GROUP(VAPI_SQD)\
	\
	BEGIN_QP_STATE_GROUP(VAPI_SQE)\
		\
		INVAL_QP_XITION_NODE(VAPI_RESET)	\
		INVAL_QP_XITION_NODE(VAPI_INIT)	\
		INVAL_QP_XITION_NODE(VAPI_RTR)	\
		VALID_QP_XITION_NODE(VAPI_RTS,SQE_RTS_OPT_MASK,SQE_RTS_REQ_MASK)\
		INVAL_QP_XITION_NODE(VAPI_SQD)	\
		INVAL_QP_XITION_NODE(VAPI_SQE)	\
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)	\
\
	END_QP_STATE_GROUP(VAPI_SQE)\
	\
	BEGIN_QP_STATE_GROUP(VAPI_ERR)\
		\
		VALID_QP_XITION_NODE(VAPI_RESET,ERR_RST_OPT_MASK,ERR_RST_REQ_MASK)	\
		INVAL_QP_XITION_NODE(VAPI_INIT)	\
		INVAL_QP_XITION_NODE(VAPI_RTR)	\
		INVAL_QP_XITION_NODE(VAPI_RTS)	\
		INVAL_QP_XITION_NODE(VAPI_SQD)	\
		INVAL_QP_XITION_NODE(VAPI_SQE)	\
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)	\
\
	END_QP_STATE_GROUP(VAPI_ERR)\
\
END_QP_STATE_XITION_MAP\
)
*/

/* the actual QP state xition table, created using the utility macros described here.
   this xlates into a 2 dimentional array where each node is an instance of QPM_qp_state_node_t,
   assigned with the input values given in the macro calls. */

BEGIN_QP_STATE_XITION_MAP(qp_xition_table)

	BEGIN_QP_STATE_GROUP(VAPI_RESET)
		
		VALID_QP_XITION_NODE(VAPI_RESET,ALL_ERR_MASK,(MT_ulong_ptr_t)(NULL))	
		VALID_QP_XITION_NODE(VAPI_INIT,RST_INIT_OPT_MASK,RST_INIT_REQ_MASK)	
		INVAL_QP_XITION_NODE(VAPI_RTR)	
		INVAL_QP_XITION_NODE(VAPI_RTS)	
		INVAL_QP_XITION_NODE(VAPI_SQD)	
		INVAL_QP_XITION_NODE(VAPI_SQE)	
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)	
	
	END_QP_STATE_GROUP(VAPI_RESET)
	
	BEGIN_QP_STATE_GROUP(VAPI_INIT)
		
		VALID_QP_XITION_NODE(VAPI_RESET,ALL_ERR_MASK,ALL_ERR_MASK)	
		VALID_QP_XITION_NODE(VAPI_INIT,INIT_INIT_OPT_MASK,INIT_INIT_REQ_MASK)	
		VALID_QP_XITION_NODE(VAPI_RTR,INIT_RTR_OPT_MASK,INIT_RTR_REQ_MASK)	
		INVAL_QP_XITION_NODE(VAPI_RTS)	
		INVAL_QP_XITION_NODE(VAPI_SQD)	
		INVAL_QP_XITION_NODE(VAPI_SQE)	
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)

	END_QP_STATE_GROUP(VAPI_INIT)
	
	BEGIN_QP_STATE_GROUP(VAPI_RTR)
		
		VALID_QP_XITION_NODE(VAPI_RESET,ALL_ERR_MASK,ALL_ERR_MASK)	
		INVAL_QP_XITION_NODE(VAPI_INIT)	
		INVAL_QP_XITION_NODE(VAPI_RTR)	
		VALID_QP_XITION_NODE(VAPI_RTS,RTR_RTS_OPT_MASK,RTR_RTS_REQ_MASK)
		INVAL_QP_XITION_NODE(VAPI_SQD)	
		INVAL_QP_XITION_NODE(VAPI_SQE)	
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)	

	END_QP_STATE_GROUP(VAPI_RTR)
	
	BEGIN_QP_STATE_GROUP(VAPI_RTS)
		
		VALID_QP_XITION_NODE(VAPI_RESET,ALL_ERR_MASK,ALL_ERR_MASK)	
		INVAL_QP_XITION_NODE(VAPI_INIT)	
		INVAL_QP_XITION_NODE(VAPI_RTR)	
		VALID_QP_XITION_NODE(VAPI_RTS,RTS_RTS_OPT_MASK,RTS_RTS_REQ_MASK)	
		VALID_QP_XITION_NODE(VAPI_SQD,RTS_SQD_OPT_MASK,RTS_SQD_REQ_MASK)
		INVAL_QP_XITION_NODE(VAPI_SQE)	
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)	

	END_QP_STATE_GROUP(VAPI_RTS)
	
	BEGIN_QP_STATE_GROUP(VAPI_SQD)
		
		VALID_QP_XITION_NODE(VAPI_RESET,ALL_ERR_MASK,ALL_ERR_MASK)	
		INVAL_QP_XITION_NODE(VAPI_INIT)	
		INVAL_QP_XITION_NODE(VAPI_RTR)	
		VALID_QP_XITION_NODE(VAPI_RTS,SQD_RTS_OPT_MASK,SQD_RTS_REQ_MASK)
		INVAL_QP_XITION_NODE(VAPI_SQD)	
		INVAL_QP_XITION_NODE(VAPI_SQE)	
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)	

	END_QP_STATE_GROUP(VAPI_SQD)
	
	BEGIN_QP_STATE_GROUP(VAPI_SQE)
		
		VALID_QP_XITION_NODE(VAPI_RESET,ALL_ERR_MASK,ALL_ERR_MASK)	
		INVAL_QP_XITION_NODE(VAPI_INIT)	
		INVAL_QP_XITION_NODE(VAPI_RTR)	
		VALID_QP_XITION_NODE(VAPI_RTS,SQE_RTS_OPT_MASK,SQE_RTS_REQ_MASK)
		INVAL_QP_XITION_NODE(VAPI_SQD)	
		INVAL_QP_XITION_NODE(VAPI_SQE)	
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,ALL_ERR_MASK)	

	END_QP_STATE_GROUP(VAPI_SQE)
	
	BEGIN_QP_STATE_GROUP(VAPI_ERR)
		
		VALID_QP_XITION_NODE(VAPI_RESET,ERR_RST_OPT_MASK,ERR_RST_REQ_MASK)	
		INVAL_QP_XITION_NODE(VAPI_INIT)	
		INVAL_QP_XITION_NODE(VAPI_RTR)	
		INVAL_QP_XITION_NODE(VAPI_RTS)	
		INVAL_QP_XITION_NODE(VAPI_SQD)	
		INVAL_QP_XITION_NODE(VAPI_SQE)	
		VALID_QP_XITION_NODE(VAPI_ERR,ALL_ERR_MASK,(MT_ulong_ptr_t)(NULL))	

	END_QP_STATE_GROUP(VAPI_ERR)

END_QP_STATE_XITION_MAP

/*------------------------------- TS QP attribute masks -----------------------------*/

#define TS_RC_MASK	(QP_ATTR_QP_STATE | QP_ATTR_EN_SQD_ASYN_NOTIF | QP_ATTR_PKEY_IX |\
					 QP_ATTR_SQ_PSN | QP_ATTR_CAP | QP_ATTR_RQ_PSN | QP_ATTR_PORT |\
					 QP_ATTR_REMOTE_ATOMIC_FLAGS | QP_ATTR_OUS_DST_RD_ATOM | QP_ATTR_QP_OUS_RD_ATOM |\
					 QP_ATTR_DEST_QP_NUM | QP_ATTR_MIN_RNR_TIMER | QP_ATTR_AV |\
					 QP_ATTR_PATH_MTU | QP_ATTR_TIMEOUT | QP_ATTR_RETRY_COUNT | QP_ATTR_RNR_RETRY |\
					 QP_ATTR_ALT_PATH | QP_ATTR_PATH_MIG_STATE | QP_ATTR_SCHED_QUEUE)

#define TS_UC_MASK	(QP_ATTR_QP_STATE | QP_ATTR_EN_SQD_ASYN_NOTIF | QP_ATTR_PKEY_IX |\
					 QP_ATTR_SQ_PSN | QP_ATTR_CAP | QP_ATTR_PORT | QP_ATTR_RQ_PSN | QP_ATTR_PORT |\
					 QP_ATTR_REMOTE_ATOMIC_FLAGS | QP_ATTR_DEST_QP_NUM | QP_ATTR_AV |\
					 QP_ATTR_PATH_MTU | QP_ATTR_ALT_PATH | QP_ATTR_PATH_MIG_STATE | QP_ATTR_SCHED_QUEUE)

#define TS_RD_MASK	(QP_ATTR_QP_STATE | QP_ATTR_EN_SQD_ASYN_NOTIF | QP_ATTR_QKEY |\
					 QP_ATTR_CAP | QP_ATTR_REMOTE_ATOMIC_FLAGS | QP_ATTR_SCHED_QUEUE)

#define TS_UD_MASK	(QP_ATTR_QP_STATE | QP_ATTR_EN_SQD_ASYN_NOTIF | QP_ATTR_PKEY_IX |\
					 QP_ATTR_QKEY | QP_ATTR_SQ_PSN | QP_ATTR_CAP | QP_ATTR_PORT | QP_ATTR_SCHED_QUEUE)
					 
#define TS_RAW_MASK	( QP_ATTR_QP_STATE | QP_ATTR_EN_SQD_ASYN_NOTIF | QP_ATTR_PKEY_IX |\
					  QP_ATTR_QKEY | QP_ATTR_SQ_PSN | QP_ATTR_CAP | QP_ATTR_PORT | QP_ATTR_SCHED_QUEUE)
					  
/*----------------------- utility macros for defining TS mask table -----------------------------*/

/* used to define TS mask element of the table, input is the QP attribute mask.
   the result is an instance of VAPI_qp_attr_mask_t. */
#define DEFINE_TS_MASK(ts,mask) mask,
/* used to declare & begin definition of a new TS mask table, 
   who will be named according to the input argument
   the result is an array of VAPI_qp_attr_mask_t elements. */
#define BEGIN_TS_MASK_MAP(tab) static VAPI_qp_attr_mask_t tab[QPM_NUM_TS] = {

/* used to end definition of the table created by an above DEFINE_TS_MASK call. */
#define END_TS_MASK_MAP };

/* the actual TS mask table, created using the utility macros described here.
   this xlates into an array where each node is an instance of VAPI_qp_attr_mask_t,
   assigned with the input values given in the macro calls. */
BEGIN_TS_MASK_MAP(qp_ts_attr_support)
	
	DEFINE_TS_MASK(VAPI_TS_RC	,TS_RC_MASK)
	DEFINE_TS_MASK(VAPI_TS_RD	,TS_RD_MASK)
	DEFINE_TS_MASK(VAPI_TS_UC	,TS_UC_MASK)
	DEFINE_TS_MASK(VAPI_TS_UD	,TS_UD_MASK)
	DEFINE_TS_MASK(VAPI_TS_RAW	,TS_RAW_MASK)

END_TS_MASK_MAP

#endif

