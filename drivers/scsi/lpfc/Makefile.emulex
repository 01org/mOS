#/*******************************************************************
# * This file is part of the Emulex Linux Device Driver for         *
# * Enterprise Fibre Channel Host Bus Adapters.                     *
# * Refer to the README file included with this package for         *
# * driver version and adapter support.                             *
# * Copyright (C) 2004 Emulex Corporation.                          *
# * www.emulex.com                                                  *
# *                                                                 *
# * This program is free software; you can redistribute it and/or   *
# * modify it under the terms of the GNU General Public License     *
# * as published by the Free Software Foundation; either version 2  *
# * of the License, or (at your option) any later version.          *
# *                                                                 *
# * This program is distributed in the hope that it will be useful, *
# * but WITHOUT ANY WARRANTY; without even the implied warranty of  *
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *
# * GNU General Public License for more details, a copy of which    *
# * can be found in the file COPYING included with this package.    *
# *******************************************************************/

# This Makefile builds the lpfcdd and lpfndd drivers for 2.4 and 2.6
# Linux kernels, but uses a different process depending on whether
# it's 2.4 or 2.6.

ifneq (,$(KERNELRELEASE))

obj-$(CONFIG_SCSI_LPFCDD) := lpfcdd.o
lpfcdd-objs := lpfc_core.o core.o prod_linux.o lpfcLINUXfcp.o

obj-$(CONFIG_SCSI_LPFNDD) += lpfndd.o
lpfndd-objs := lpfcLINUXlan.o

EXTRA_CFLAGS += -Idrivers/scsi

clean-files := *.o *.ko *.mod.o *.mod.c .*.cmd .*.flags

else

ifeq (,$(KERNELVERSION))
   KERNELVERSION := $(shell uname -r)
endif

# determine if this is a 2.4.x or 2.6.x module build
ifneq (,$(findstring 2.6., $(KERNELVERSION)))
# Building for 2.6 kernel

ifeq (,$(KSRC))
   KSRC := /lib/modules/$(KERNELVERSION)/build
endif

modules:
	$(MAKE) -C $(KSRC) SUBDIRS=$(PWD) CONFIG_SCSI_LPFCDD=m CONFIG_SCSI_LPFNDD=m modules

modules_install:
	install -c lpfcdd.ko /lib/modules/$(KERNELVERSION)/kernel/drivers/scsi/$(lpfc-module)
#	install -c $(lpfn-module) /lib/modules/$(KERNELVERSION)/kernel/drivers/net/$(lpfn-module)
	depmod -a

clean:
	$(MAKE) -C $(KSRC) SUBDIRS=$(PWD) CONFIG_SCSI_LPFCDD=m CONFIG_SCSI_LPFNDD=m clean

else
# Building for 2.4 kernel

# Change  the value to 20 in the following line if varyio is desired in SLES 8.
SLES_VARYIO = 1

#HARDW = i386;
#HARDW = ia64;
#HARDW = ppc64;
#HARDW = x86_64;
#RH = /usr/src/redhat;
#RH = /usr/src/packages;
#APP = rpm;
#APP = rpmbuild;
OBJ_LOWER = fcscsib.o fcmboxb.o fcmemb.o fcelsb.o fcstratb.o fcxmitb.o fcrpib.o fcclockb.o 

ia64: build
ifeq ($(MAKECMDGOALS),ia64)
HARDW = $(MAKECMDGOALS)
endif

ppc64: build
ifeq ($(MAKECMDGOALS),ppc64)
HARDW = $(MAKECMDGOALS)
endif

i386: build
ifeq ($(MAKECMDGOALS),i386)
HARDW = $(MAKECMDGOALS)
endif

x86_64: build
ifeq ($(MAKECMDGOALS), x86_64)
HARDW = $(MAKECMDGOALS)
endif

build: clean STenv obj_lower linkit

modules: clean STenv  obj_lower linkit 

install: STenv
	@install -d $(MODPATH)/scsi; 
	@install -c $(LPFCVER) $(MODPATH)/scsi/$(LPFCO).o; 
	@install -d $(MODPATH)/net; 
	@install -c $(LPFNVER) $(MODPATH)/net/$(LPFNO).o;  

STenv: find_env STX86 STX64 STP64 STA64

find_env:  
ifeq ($(MAKECMDGOALS),RPM)
OPTRPM = -bb
endif
ifeq ($(MAKECMDGOALS),rpm)
OPTRPM = -bb
endif
ifeq ($(MAKECMDGOALS),src)
OPTRPM = -bs
endif
ifeq ($(MAKECMDGOALS),SRC)
OPTRPM = -bs
endif
ifndef ($(RH))
############ Determine distro
RH := $(shell if [ -e /usr/src/packages ]; then echo /usr/src/packages; \
   else echo /usr/src/redhat; fi)
endif
USE_HIGHMEM_IO = 0
ifeq ($(RH),/usr/src/redhat)
BASERH = redhat
else
BASERH = packages
USE_HIGHMEM_IO = 3
endif
ifndef ($(APP))
############ Determine rpm builder
APP := $(shell if [ -x /usr/bin/rpmbuild ]; then echo rpmbuild; \
          else echo rpm; fi)
endif
ifeq ($(HARDW),)
############ Determine hardware
HARDT := $(shell uname -m)
ifeq ($(HARDT),i686)
HARDW = i386
else
ifeq ($(HARDT),ia64)
HARDW = ia64
else
ifeq ($(HARDT),x86_64)
HARDW = x86_64
else
HARDW = ppc64
endif
endif
endif
endif
CRVERS := $(shell `echo `grep LPFC_DRIVER_VERSION ./lpfcLINUXfcp.c | grep define | sed "s/.*VERSION .//" | sed s/\"//``)

############ Determine context
ifeq ($(CONFIG_SCSI_LPFC),m)
 CONTX = KM
else
 ifeq ($(CONFIG_SCSI_LPFC),y)
  CONTX = KB
 else
 CONTX = MO
 endif
endif

ifeq ($(CONTX),MO)
############ Determine includes 
LIBPATH := /lib/modules/$(KERNELVERSION)
MODPATH := $(LIBPATH)/kernel/drivers
BASEINCLUDE := $(shell if [ -e $(LIBPATH)/build ]; then \
             echo $(LIBPATH)/build; \
             else if [ -e /usr/src/linux-2.4 ]; then \
             echo /usr/src/linux-2.4; else echo /usr/src/linux; fi fi)
else
LIBPATH := $(shell if [ -e $(MODLIB) ]; then \
             echo $(MODLIB); \
             else echo /lib/modules/$(KERNELVERSION); fi)
BASEINCLUDE := $(TOPDIR)
MODPATH = $(LIBPATH)/kernel/drivers
endif

ifeq ($(HARDW),ppc64)
ifndef ($(CROSS_COMPILE))
CROSS_COMPILE := $(shell if [ -e /usr/local/ppc64-current3.0/bin/powerpc64-linux-gcc ]; then \
    echo /usr/local/ppc64-current3.0/bin/powerpc64-linux-; \
    else if [ -e /opt/cross/bin/powerpc64-linux-gcc ]; then \
    echo /opt/cross/bin/powerpc64-linux- ; fi fi)
endif
endif
MODINC = -DMODULE -DMODVERSIONS -include $(BASEINCLUDE)/include/linux/modversions.h 

# The following variable controls VARYIO support:
# If
# VARYIO=1, the system will attempt to configure VARYIO support automatically
# VARYIO=20, we set ".can_do_vary = 1" in the Scsi_Host_Template (Ex: SLES, AS2.1/IA64)
# VARYIO=21, we use SCSI_HOST_VARYIO macro (Ex: AS2.1/x86)
# VARYIO=3, we set ".vary_io = 1" in the Scsi_Host_Template (Ex: AS3.0)
# any other value of VARYIO will disable VARYIO support (Ex: RH 9.0)

VARYIO = $(SLES_VARYIO)
ifeq ($(VARYIO),1)
  VARYIO = 0 
  ifeq ($(findstring release 2,$(shell cat /etc/redhat-release  2>/dev/null)),release 2)
     ifeq ($(HARDT),i686)
             VARYIO = 21
             USE_HIGHMEM_IO = 2
     else
             USE_HIGHMEM_IO = 3
             VARYIO = 20
     endif
  else
    ifeq ($(findstring release 3,$(shell cat /etc/redhat-release  2>/dev/null)),release 3)
       VARYIO = 3
       USE_HIGHMEM_IO = 3
    endif
  endif
endif

ENV += -DVARYIO=$(VARYIO)
ENV += -DUSE_HIGHMEM_IO=$(USE_HIGHMEM_IO)

AS	=$(CROSS_COMPILE)as
LD	=$(CROSS_COMPILE)ld
CC	=$(CROSS_COMPILE)gcc
CPP	=$(CC) -E
AR	=$(CROSS_COMPILE)ar
NM	=$(CROSS_COMPILE)nm
STRIP	=$(CROSS_COMPILE)strip
OBJDUMP	=$(CROSS_COMPILE)objdump
AWK	=awk
MAKE	=make
GENKSYMS=/sbin/genksyms
LPFCO   = lpfcdd
LPFNO   = lpfndd
ifeq ($(CONTX),MO)
LPFCVER = $(LPFCO).o
LPFNVER = $(LPFNO).o
else
LPFCVER = ../$(LPFCO).o
LPFNVER = $(LPFNO).o
endif
OBJ_CORE_L = lpfc_core.o core.o prod_linux.o
OBJ_PROD_L = lpfcLINUXfcp.o 
OBJ_PROD_U = lpfcLINUXlan.o 


obj_lower: 
	$(CC) $(CDEFS) -D__KERNEL__ $(CFLAGS) $(ENV) $(INCLUDEDIR) -c lpfc_core.c
	$(CC) $(CDEFS) -D__KERNEL__ $(CFLAGS) $(ENV) $(INCLUDEDIR) -c core.c
	$(CC) $(CDEFS) -D__KERNEL__ $(CFLAGS) $(ENV) $(INCLUDEDIR) -c prod_linux.c
	$(CC) $(CDEFS) -D__KERNEL__ $(CFLAGS) $(ENV) $(INCLUDEDIR) -c lpfcLINUXfcp.c 
	$(CC) $(CDEFS) -D__KERNEL__ $(CFLAGS) $(ENV) $(INCLUDEDIR) -c lpfcLINUXlan.c
linkit:
ifeq ($(CONTX),KB)
	ld -m $(ELF) -r -o ../lpfcdd.o $(OBJ_CORE_L) $(OBJ_PROD_L) $(OBJ_PROD_U)
else
	$(LD) -m $(ELF) -r -o $(LPFCVER) $(OBJ_CORE_L) $(OBJ_PROD_L)  
	$(LD) -m $(ELF) -r -o $(LPFNVER) $(OBJ_PROD_U) 
endif
fastdep: clean

clean:
	@rm -fr ../lpfcdd.o
	@rm -fr *.o

kbuild_clean: clean
	@rm $(VERSION_FILE)

modules_install: STenv
	@mkdir -p $(MODPATH)/net; 
	@cp $(LPFNO).o $(MODPATH)/net/; 
	@mkdir -p $(MODPATH)/scsi; 
	@cp ../$(LPFCO).o $(MODPATH)/scsi/; 

STX86:

ifeq ($(HARDW),i386)
CDEFS = -Wall -O2 -fomit-frame-pointer
INCDIR = -I$(BASEINCLUDE)/include -I$(BASEINCLUDE)/drivers/scsi -I$(BASEINCLUDE)/include/scsi
ELF = elf_i386 
ifeq ($(CONTX),KB)
INCLUDEDIR = $(INCDIR) 
else
INCLUDEDIR = $(INCDIR) $(MODINC) 
endif
endif

STX64:
ifeq ($(HARDW),ia64)
INCDIR = -I$(BASEINCLUDE)/include -I$(BASEINCLUDE)/drivers/scsi -I$(BASEINCLUDE)/include/scsi 
INCLUDEDIR = $(MODINC) $(INCDIR)
ELF =  elf64_ia64
ifeq ($(CONTX),MO)
CDEFS = -Wall -O2 -fomit-frame-pointer
CFLAGS = -Wstrict-prototypes -fno-strict-aliasing -pipe \
       -Wa,-x -ffixed-r13 -mfixed-range=f10-f15,f32-f127 -funwind-tables  \
       -falign-functions=32 -mb-step
else
ifeq ($(CONTX),KB)
INCLUDEDIR = $(INCDIR) 
endif
endif
endif

STA64:
ifeq ($(HARDW),x86_64)
INCDIR = -I$(BASEINCLUDE)/include -I$(BASEINCLUDE)/drivers/scsi -I$(BASEINCLUDE)/include/scsi 
INCLUDEDIR = $(MODINC) $(INCDIR)
ELF =  elf_x86_64
ifeq ($(CONTX),MO)
CDEFS = -Wall -O2 -fomit-frame-pointer
CFLAGS = -Wstrict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common \
         -mno-red-zone -mcmodel=kernel -pipe -fno-reorder-blocks -finline-limit=2000 \
         -fno-strength-reduce -fno-asynchronous-unwind-tables 
else
ifeq ($(CONTX),KB)
INCLUDEDIR = $(INCDIR) 
endif
endif
endif

STP64:
ifeq ($(HARDW),ppc64)
INCDIR = -I$(BASEINCLUDE)/include -I$(BASEINCLUDE)/drivers/scsi -I$(BASEINCLUDE)/include/scsi 
ELF = elf64ppc
ifeq ($(CONTX),MO)
ifeq ($(BASERH),redhat)
CDEFS = -m64 -Wall -O2 
else
CDEFS = -Wall -O2 
endif
CFLAGS = -Wstrict-prototypes -Wno-trigraphs \
         -fno-strict-aliasing -fno-common  -Wno-unused \
         -fomit-frame-pointer -fsigned-char -msoft-float \
         -pipe -Wno-uninitialized -mminimal-toc -fno-builtin 
INCLUDEDIR = $(MODINC) $(INCDIR) 
else
ifeq ($(CONTX),KB)
INCLUDEDIR = $(INCDIR) 
else
ifeq ($(CONTX),KM)
INCDIR = -I$(BASEINCLUDE)/include/scsi -I$(BASEINCLUDE)/drivers/scsi -I$(BASEINCLUDE)/include 
INCLUDEDIR = $(MODINC) $(INCDIR) 
endif
endif
endif
endif

src: SRC
SRC: BRPM

rpm: RPM
RPM: BRPM 

BRPM:	clean find_env
	rm -rf /tmp/lpfcdriver-$(CRVERS); mkdir -p /tmp/lpfcdriver-$(CRVERS); cp * /tmp/lpfcdriver-$(CRVERS) 
	cd /tmp; tar -cf $(RH)/SOURCES/lpfc-rpm.tar lpfcdriver-$(CRVERS)
	rm -rf /tmp/lpfcdriver-$(CRVERS)
ifeq ($(BASERH),packages)
	@cat  ./lpfc.spec | sed s/LPFC_DRIVER_VERSION/$(CRVERS)/ | sed s/redhat/packages/ >  $(RH)/SPECS/lpfc.spec
else
	@cat  ./lpfc.spec | sed s/LPFC_DRIVER_VERSION/$(CRVERS)/ >  $(RH)/SPECS/lpfc.spec
endif
	$(APP) $(OPTRPM) $(RH)/SPECS/lpfc.spec

endif

endif

